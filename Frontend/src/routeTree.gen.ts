/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createRootRoute } from '@tanstack/react-router'

import { Route as FlujoDeBalanceRouteImport } from './routes/FlujoDeBalance'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginAuthPageRouteImport } from './routes/Login/authPage'
import { Route as LoginSIgnRouteImport } from './routes/Login/SIgn'
import { Route as LoginRegisterRouteImport } from './routes/Login/Register'
import { Route as FromIdRouteImport } from './routes/From/$id'

const rootRouteImport = createRootRoute()

const FlujoDeBalanceRoute = FlujoDeBalanceRouteImport.update({
  id: '/FlujoDeBalance',
  path: '/FlujoDeBalance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginAuthPageRoute = LoginAuthPageRouteImport.update({
  id: '/Login/authPage',
  path: '/Login/authPage',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginSIgnRoute = LoginSIgnRouteImport.update({
  id: '/Login/SIgn',
  path: '/Login/SIgn',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRegisterRoute = LoginRegisterRouteImport.update({
  id: '/Login/Register',
  path: '/Login/Register',
  getParentRoute: () => rootRouteImport,
} as any)
const FromIdRoute = FromIdRouteImport.update({
  id: '/From/$id',
  path: '/From/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/FlujoDeBalance': typeof FlujoDeBalanceRoute
  '/From/$id': typeof FromIdRoute
  '/Login/Register': typeof LoginRegisterRoute
  '/Login/SIgn': typeof LoginSIgnRoute
  '/Login/authPage': typeof LoginAuthPageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/FlujoDeBalance': typeof FlujoDeBalanceRoute
  '/From/$id': typeof FromIdRoute
  '/Login/Register': typeof LoginRegisterRoute
  '/Login/SIgn': typeof LoginSIgnRoute
  '/Login/authPage': typeof LoginAuthPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/FlujoDeBalance': typeof FlujoDeBalanceRoute
  '/From/$id': typeof FromIdRoute
  '/Login/Register': typeof LoginRegisterRoute
  '/Login/SIgn': typeof LoginSIgnRoute
  '/Login/authPage': typeof LoginAuthPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/FlujoDeBalance'
    | '/From/$id'
    | '/Login/Register'
    | '/Login/SIgn'
    | '/Login/authPage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/FlujoDeBalance'
    | '/From/$id'
    | '/Login/Register'
    | '/Login/SIgn'
    | '/Login/authPage'
  id:
    | '__root__'
    | '/'
    | '/FlujoDeBalance'
    | '/From/$id'
    | '/Login/Register'
    | '/Login/SIgn'
    | '/Login/authPage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlujoDeBalanceRoute: typeof FlujoDeBalanceRoute
  FromIdRoute: typeof FromIdRoute
  LoginRegisterRoute: typeof LoginRegisterRoute
  LoginSIgnRoute: typeof LoginSIgnRoute
  LoginAuthPageRoute: typeof LoginAuthPageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/FlujoDeBalance': {
      id: '/FlujoDeBalance'
      path: '/FlujoDeBalance'
      fullPath: '/FlujoDeBalance'
      preLoaderRoute: typeof FlujoDeBalanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Login/authPage': {
      id: '/Login/authPage'
      path: '/Login/authPage'
      fullPath: '/Login/authPage'
      preLoaderRoute: typeof LoginAuthPageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Login/SIgn': {
      id: '/Login/SIgn'
      path: '/Login/SIgn'
      fullPath: '/Login/SIgn'
      preLoaderRoute: typeof LoginSIgnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Login/Register': {
      id: '/Login/Register'
      path: '/Login/Register'
      fullPath: '/Login/Register'
      preLoaderRoute: typeof LoginRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/From/$id': {
      id: '/From/$id'
      path: '/From/$id'
      fullPath: '/From/$id'
      preLoaderRoute: typeof FromIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlujoDeBalanceRoute: FlujoDeBalanceRoute,
  FromIdRoute: FromIdRoute,
  LoginRegisterRoute: LoginRegisterRoute,
  LoginSIgnRoute: LoginSIgnRoute,
  LoginAuthPageRoute: LoginAuthPageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
